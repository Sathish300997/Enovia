                                  callback function in javascript
                                   ------------------------------
<script>
const std_personaldetails=(callstdacd)=>{
    console.log("inside student details")
    callstdacd();
}

const std_academic=()=>{
    console.log("inside student academic")
}

std_personaldetails(std_academic);
    </script>

output:
inside student details
inside student academic
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 
                                    callback hell
                                    --------------

 setTimeout(()=>{
     console.log("1")
     setTimeout(()=>{
         console.log("2")
         setTimeout(()=>{
             console.log("3")
             setTimeout(()=>{
                 console.log("4")
             },1000)
         },10000)
     },2000)
 },1000)

output:

1
2
3
4
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                Promise
                                                                ---------

let p=new Promise((resolve,reject)=>{
let a=1+2;
if(a==3)
{
    resolve("success")
    
}else
{
    reject("failed")
}
});

p.then((message)=>{
console.log('this is in then method'+message)
}).catch((message)=>{
    console.log('this is in catch method'+ message)
}).then((message)=>{
    console.log("success Last" + message )
})

output:
this is in then method success
success Last undefined
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
async
----------------


 async function myfn()       --------- with async keyword
{
    return 1;
}
console.log(myfn())

output:
it returns promise object with 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
async and await
-----------------


 async function myfn()
{
    return new Promise((resolve,reject)=>{
       setTimeout(()=>{
           resolve("success")
       },2000)
    });
}

async function awfn()
{
   console.log("tamil")
    const val=await myfn();
    console.log(val);
}
//console.log(myfn())
awfn()

output:
tamil
success


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                                                           react js


import React from 'react';
import { useEffect } from 'react';
import { useState } from 'react';

export default function Sample() {
    const [initial, setinitial] = useState({});
    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/todos/')
        .then(response => response.json())
        .then(json => setinitial(json))
    }, []);
  return (
    <div>
      {/* {JSON.stringify(initial)} */}
      {JSON.stringify(initial)}
    </div>
  );
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Currying:

Currying in JavaScript is a functional programming technique that transforms a function with multiple arguments into a sequence of functions, each taking a single argument. This enables you to partially apply arguments and create reusable, specialized functions

Example:
 function add(a){
    return function (b){
        return a+b
    }
}

console.log(add(3)(5))
Output:
8
